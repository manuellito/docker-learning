ARG BASE_CONTAINER=ubuntu:bionic-20200112@sha256:bc025862c3e8ec4a8754ea4756e33da6c41cba38330d7e324abd25c8e0b93300
FROM $BASE_CONTAINER

# Build on Jupyter stack

LABEL maintainer="Emmanuel Farcy <manu.farcy@gmail.com>"

ARG NB_USER="icare"
ARG NB_UID="1000"
ARG NB_GID="100"

# Configure environment
ENV CONDA_DIR=/opt/conda \
    SHELL=/bin/bash \
    NB_USER=$NB_USER \
    NB_UID=$NB_UID \
    NB_GID=$NB_GID \
    LC_ALL=en_US.UTF-8 \
    LANG=en_US.UTF-8 \
    LANGUAGE=en_US.UTF-8
ENV PATH=$CONDA_DIR/bin:$PATH \
    HOME=/home/$NB_USER \
    DL_LIBS=/home/$NB_USER/libs

USER root

# Install all OS dependencies for notebook server that starts but lacks all
# features (e.g., download as all possible file formats)

ENV DEBIAN_FRONTEND noninteractive
RUN apt update && \
    apt upgrade -yq && \
    apt install -yq --no-install-recommends \
    wget \
    bzip2 \
    ca-certificates \
    sudo \
    locales \
    fonts-liberation \
    run-one \
    git \
    jed \
    libsm6 \
    libxext-dev \
    libxrender1 \ 
    lmodern \ 
    netcat \
    pandoc \ 
    python-dev \
    tzdata \
    nano \
    g++ \
    patch \
 && apt clean && rm -rf /var/lib/apt/lists/*

RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && \
    locale-gen

# Add a script that we will use to correct permissions after running certain commands
ADD fix-permissions /usr/local/bin/fix-permissions
RUN chmod a+rx /usr/local/bin/fix-permissions

# Enable prompt color in the skeleton .bashrc before creating the default NB_USER
RUN sed -i 's/^#force_color_prompt=yes/force_color_prompt=yes/' /etc/skel/.bashrc

# Create NB_USER wtih name icare user with UID=1000 and in the 'users' group
# and make sure these dirs are writable by the `users` group.
RUN echo "auth requisite pam_deny.so" >> /etc/pam.d/su && \
    sed -i.bak -e 's/^%admin/#%admin/' /etc/sudoers && \
    sed -i.bak -e 's/^%sudo/#%sudo/' /etc/sudoers && \
    useradd -m -s /bin/bash -N -u $NB_UID $NB_USER && \
    mkdir -p $CONDA_DIR && \
    chown $NB_USER:$NB_GID $CONDA_DIR && \
    chmod g+w /etc/passwd && \
    fix-permissions $HOME && \
    fix-permissions "$(dirname $CONDA_DIR)"

# Setup work directory for backward-compatibility
RUN mkdir $HOME/work && \
    fix-permissions /home/$NB_USER

USER $NB_UID
ARG PYTHON_VERSION=default

RUN echo $DL_LIBS

# Install conda as jovyan and check the md5 sum provided on the download site
ENV MINICONDA_VERSION=4.7.12.1 \
    MINICONDA_MD5=81c773ff87af5cfac79ab862942ab6b3 \
    CONDA_VERSION=4.7.12 

RUN cd /tmp && \
    wget --quiet https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh && \
    echo "${MINICONDA_MD5} *Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh" | md5sum -c - && \
    /bin/bash Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p $CONDA_DIR && \
    rm Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh && \
    echo "conda ${CONDA_VERSION}" >> $CONDA_DIR/conda-meta/pinned && \
    conda config --system --prepend channels conda-forge && \
    conda config --system --set auto_update_conda false && \
    conda config --system --set show_channel_urls true && \
    if [ ! $PYTHON_VERSION = 'default' ]; then conda install --yes python=$PYTHON_VERSION; fi && \
    conda list python | grep '^python ' | tr -s ' ' | cut -d '.' -f 1,2 | sed 's/$/.*/' >> $CONDA_DIR/conda-meta/pinned && \
    conda install --quiet --yes conda && \    
    conda install --quiet --yes pip && \ 
    conda update --all --quiet --yes && \
    conda clean --all -f -y && \ 
    rm -rf /home/$NB_USER/.cache/yarn && \
    fix-permissions $CONDA_DIR && \
    fix-permissions /home/$NB_USER

# Install Tini 
RUN conda install --quiet --yes 'tini=0.18.0' && \
    conda list tini | grep tini | tr -s ' ' | cut -d ' ' -f 1,2 >> $CONDA_DIR/conda-meta/pinned && \
    conda clean --all -f -y && \
    fix-permissions $CONDA_DIR && \
    fix-permissions /home/$NB_USER

# Install Jupyter Notebook, Lab, and Hub
# Generate a notebook server config
# Cleanup temporary files
# Correct permissions
# Do all this in a single RUN command to avoid duplicating all of the
# files across image layers when the permissions change
RUN conda install --quiet --yes \
    'notebook=6.0.3' \
    'jupyterhub=1.1.0' \ 
    'jupyterlab=1.2.5' \ 
    'jupyter_dashboards' \
    # Install Python 3 packages
    'beautifulsoup4=4.8.*' \
    'conda-forge::blas=*=openblas' \
    'bokeh=1.4*' \
    'cloudpickle=1.2*' \
    'cython=0.29*' \
    'dask=2.9.*' \
    'dill=0.3*' \
    'h5py=2.10*' \
    'hdf5=1.10*' \
    'ipywidgets=7.5*' \
    'matplotlib-base=3.1.*' \
    'numba=0.45*' \
    'numexpr=2.6*' \
    'pandas=0.25*' \
    'patsy=0.5*' \
    'protobuf=3.9.*' \
    'scikit-image=0.15*' \
    'scikit-learn=0.21*' \
    'scipy=1.3*' \
    'seaborn=0.9*' \
    'sqlalchemy=1.3*' \
    'statsmodels=0.10*' \
    'sympy=1.4*' \
    'vincent=0.4.*' \
    'xlrd' \
    'jupyterthemes' \
    'qgrid' \
    # contrib extensions for jupyter
    'jupyter_contrib_nbextensions' \
    && \    
    conda clean --all -f -y && \
    # Activate ipywidgets extension in the environment that runs the notebook server
    jupyter nbextension enable --py widgetsnbextension --sys-prefix && \
    # Also activate ipywidgets extension for JupyterLab
    # Check this URL for most recent compatibilities
    # https://github.com/jupyter-widgets/ipywidgets/tree/master/packages/jupyterlab-manager
    jupyter labextension install @jupyter-widgets/jupyterlab-manager@^1.0.1 --no-build && \
    jupyter labextension install jupyterlab_bokeh@1.0.0 --no-build && \
    jupyter lab build && \    
    # Install contrib extensions for jupyter 
    jupyter contrib nbextension install --user && \
    npm cache clean --force && \
    jupyter notebook --generate-config && \
    rm -rf $CONDA_DIR/share/jupyter/lab/staging && \
    rm -rf /home/$NB_USER/.cache/yarn && \
    fix-permissions $CONDA_DIR && \
    fix-permissions /home/$NB_USER && \
    mkdir -p /home/icare/libs

USER root
RUN apt update && apt install -y --no-install-recommends gnupg2 curl ca-certificates && \
    curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub | apt-key add - && \
    echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/cuda.list && \
    echo "deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/nvidia-ml.list && \
    apt purge --autoremove -y curl && \
    rm -rf /var/lib/apt/lists/*

ENV CUDA_VERSION 10.1.168
ENV CUDA_PKG_VERSION 10-1=$CUDA_VERSION-1

# For libraries in the cuda-compat-* package: https://docs.nvidia.com/cuda/eula/index.html#attachment-a
RUN apt update && apt install -y --no-install-recommends \
    cuda-cudart-$CUDA_PKG_VERSION \
    cuda-compat-10-1 && \
    ln -s cuda-10.1 /usr/local/cuda && \
    ln -s /usr/local/cuda-10.1/targets/x86_64-linux/lib/libcudart.so.10.1 /usr/local/lib/libcudart.so.10.1 && \
    rm -rf /var/lib/apt/lists/*

# Required for nvidia-docker v1
RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility
ENV NVIDIA_REQUIRE_CUDA "cuda>=10.1 brand=tesla,driver>=384,driver<385 brand=tesla,driver>=396,driver<397 brand=tesla,driver>=410,driver<411 brand=tesla,driver>=418,driver<419"
# Tensorflow Options
ENV OPTION_CUDA "--config=cuda"

# Add NVIDIA package repositories
# From https://www.tensorflow.org/install/gpu
RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-repo-ubuntu1804_10.1.168-1_amd64.deb && \
    apt install -y -o Dpkg::Options::="--force-confold" ./cuda-repo-ubuntu1804_10.1.168-1_amd64.deb && \
    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub && \
    apt update && \
    wget http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/nvidia-machine-learning-repo-ubuntu1804_1.0.0-1_amd64.deb && \
    apt install -y ./nvidia-machine-learning-repo-ubuntu1804_1.0.0-1_amd64.deb && \
    apt update

# Install NVIDIA driver
# Install development and runtime libraries (~4GB) # cuDNN version can be found in 6.1.1 there: # https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html
RUN apt install -y --no-install-recommends \
    # Replace cuda by cuda-toolkit. Cuda raises some unresolved dependences
    # cuda-10-1 \
    cuda-toolkit-10-1 \
    libcudnn7=7.6.4.38-1+cuda10.1  \
    libcudnn7-dev=7.6.4.38-1+cuda10.1 

# Install TensorRT. Requires that libcudnn7 is installed above. # TensortRT version can be found in 4.1 point 3 there: # https://docs.nvidia.com/deeplearning/tensorrt/install-guide/index.html
RUN apt install -y --no-install-recommends libnvinfer6=6.0.1-1+cuda10.1 \
    libnvinfer-dev=6.0.1-1+cuda10.1 \
    libnvinfer-plugin6=6.0.1-1+cuda10.1 && \
    apt clean && rm -rf /var/lib/apt/lists/*

USER $NB_USER

# Installation of tensorflow
RUN cd /home/icare/libs &&  \
    strings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep GLIBC && \
    export LD_LIBRARY_PATH=/usr/local/lib64  && \
    git clone https://github.com/bazelbuild/bazelisk.git && \
    ln bazelisk/bazelisk.py bazelisk/bazel && \
    export PATH=$PATH:/home/icare/libs/bazelisk && \
    conda install pip six numpy wheel setuptools mock 'future>=0.17.1' && \
    pip install -U keras_applications --no-deps && \
    pip install -U keras_preprocessing --no-deps && \
    cd /home/icare/libs && \
    git clone https://github.com/tensorflow/tensorflow.git && \
    cd tensorflow && \
    git checkout r2.2 && \
    grep -r _TF_MAX_BAZEL_VERSION . | grep = | cut -f2 -d\' > .bazelversion && \
    ./configure && \
    bazel build --config=v2 $OPTION_CUDA //tensorflow/tools/pip_package:build_pip_package && \
    ./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg && \
    pip install /tmp/tensorflow_pkg/tensorflow-2.2*.whl && \
    bazel clean --expunge

# Installation opencv
USER root

RUN apt update && \
    apt install -y cmake unzip pkg-config libjpeg-dev libpng-dev libtiff-dev libavcodec-dev  \
                  libxvidcore-dev libx264-dev libgtk-3-dev libatlas-base-dev gfortran python3-dev && \
    apt clean && rm -rf /var/lib/apt/lists/*

# Opencv enviromment creation
RUN wget -q -O $DL_LIBS/opencv.zip https://github.com/opencv/opencv/archive/4.3.0.zip && \ 
    wget -q -O $DL_LIBS/opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.3.0.zip && \
    unzip $DL_LIBS/opencv.zip -d $DL_LIBS && \
    unzip $DL_LIBS/opencv_contrib.zip -d $DL_LIBS && \
    rm -rf $DL_LIBS/*.zip && \
    mv $DL_LIBS/opencv-* $DL_LIBS/opencv && \
    mv $DL_LIBS/opencv_contrib* $DL_LIBS/opencv_contrib && \
    mkdir $DL_LIBS/opencv/build && \
    cd $DL_LIBS/opencv/build && \
    cmake -D WITH_CUDA=OFF \
        -D BUILD_TIFF=ON \
        -D BUILD_opencv_java=OFF \
        -D ENABLE_AVX=ON \
        -D WITH_OPENGL=ON \
        -D WITH_OPENCL=ON \
        -D WITH_IPP=ON \
        -D WITH_TBB=ON \
        -D WITH_EIGEN=ON \
        -D WITH_V4L=ON \
        -D WITH_VTK=OFF \
        -D BUILD_TESTS=OFF \
        -D BUILD_PERF_TESTS=OFF \
        -D CMAKE_BUILD_TYPE=RELEASE \
        -D BUILD_opencv_python2=OFF \
        -D CMAKE_INSTALL_PREFIX=$(python3 -c "import sys; print(sys.prefix)") \
        -D PYTHON3_EXECUTABLE=$(which python3) \
        -D PYTHON3_INCLUDE_DIR=$(python3 -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") \
        -D PYTHON3_PACKAGES_PATH=$(python3 -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())") \
        -D CMAKE_BUILD_TYPE=RELEASE \
        -D CMAKE_INSTALL_PREFIX=$DL_LIBS \
        -D PYTHON_DEFAULT_EXECUTABLE=$(which python3) \ 
        -D OPENCV_EXTRA_MODULES_PATH=$DL_LIBS/opencv_contrib/modules \
        -D BUILD_EXAMPLES=ON .. && \
    make -j4 && make install && ldconfig  && make clean && \
    # Experience some issues with libfreetype library
    # There is already in system path
    # More infos:
    # https://rtbecard.gitlab.io/2018/11/03/Installing-opencv-with-ffmpeg-support-in-Anaconda3-(Ubuntu-16.04).html
    rm -rf $CONDA_DIR/lib/libfontconfig.* \
    rm -rf $CONDA_DIR/lib/libgio-2.0.so* \        
    set PATH=$PATH:$DL_LIBS\bin && \
    fix-permissions $DL_LIBS         

USER $NB_USER

USER root
RUN pip install Cython contextlib2 pillow lxml protobuf protobuf-compiler pycocotools && \
    mkdir -p $DL_LIBS/tensorflow && \ 
    cd $DL_LIBS/tensorflow && \ 
    git clone https://github.com/tensorflow/models.git && \
    set PYTHONPATH=$DL_LIBS/tensorflow/models:$DL_LIBS/tensorflow/models/research:$DL_LIBS/tensorflow/models/research/slim:$PYTHONPATH && \
    cd $DL_LIBS/tensorflow/models/research && \
    protoc object_detection/protos/*.proto --python_out=. && \
    python setup.py build && \
    python setup.py install  && \
    fix-permissions $DL_LIBS/tensorflow      

RUN cd $DL_LIBS/tensorflow && \
    wget http://download.tensorflow.org/models/object_detection/ssd_mobilenet_v2_coco_2018_03_29.tar.gz && \
    tar xvzf ssd_mobilenet_v2_coco_2018_03_29.tar.gz && \
    rm ssd_mobilenet_v2_coco_2018_03_29.tar.gz  && \
    fix-permissions $DL_LIBS/tensorflow

RUN cd $DL_LIBS/tensorflow && \
    wget http://download.tensorflow.org/models/object_detection/ssd_inception_v2_coco_2018_01_28.tar.gz && \
    tar xvzf ssd_inception_v2_coco_2018_01_28.tar.gz && \
    rm ssd_inception_v2_coco_2018_01_28.tar.gz  && \
    fix-permissions $DL_LIBS/tensorflow

RUN cd $DL_LIBS/tensorflow && \
    wget http://download.tensorflow.org/models/object_detection/faster_rcnn_inception_v2_coco_2018_01_28.tar.gz && \
    tar xvzf faster_rcnn_inception_v2_coco_2018_01_28.tar.gz && \
    rm faster_rcnn_inception_v2_coco_2018_01_28.tar.gz  && \
    fix-permissions $DL_LIBS/tensorflow

EXPOSE 8888

# Configure container startup
ENTRYPOINT ["tini", "-g", "--"]
CMD ["start-notebook.sh"]

# Add local files as late as possible to avoid cache busting
COPY start-notebook.sh /usr/local/bin/
COPY start-singleuser.sh /usr/local/bin/
COPY jupyter_notebook_config.py /etc/jupyter/

# Fix permissions on /etc/jupyter as root
USER root
RUN fix-permissions /etc/jupyter/

USER $NB_UID

WORKDIR $HOME

RUN jupyter nbextension enable hinterland/hinterland

RUN jupyter nbextension enable varInspector/main 
RUN jupyter nbextension enable toc2/main 
RUN jupyter nbextension enable execute_time/ExecuteTime
RUN jupyter nbextension enable addbefore/main
RUN jupyter nbextension enable snippets_menu/main
RUN jupyter nbextension enable collapsible_headings/main
RUN jupyter nbextension enable comment-uncomment/main

RUN jt -t monokai -f fira -fs 13 -nf ptsans -nfs 11 -N -kl -cursw 5 -cursc r -cellw 95% -T

